pipeline {
  
  agent any

  environment {
    project      = "aircall"
    project_dir  = "terraform/code_bucket/"
    tf_command   = "terraform"
    tf_vars_file = "${environment}.tfvars"
    tf_plan_file = ".terraform/latest-plan"
    s3_key       = "code-bucket-${environment}.tfstat"    
    bucket       = "aircall-terraform-states"
  }
  
  stages {

    stage('TF clean') {
      steps {
        dir(project_dir) {
          sh 'rm -rf .terraform'
        }
      }      
    }
    
    stage('TF Install') {
      steps {
        dir(project_dir) {
          sh 'tfenv install'
        }
      }      
    }

    stage('TF Init') {
      steps {
        dir(project_dir) {
          sh '${tf_command} init \
            -backend-config="bucket=${bucket}" \
            -backend-config="key=${s3_key}" \
            -backend-config="region=${region}" \
            -backend=true \
            -force-copy \
            -get=true \
            -input=false \
            -no-color'
        }
      }      
    }

    stage('TF Plan') {
      steps {
        dir(project_dir) {
          sh '${tf_command} plan \
            -var-file="${tf_vars_file}" \
            -var region=${region} -var environment=${environment} \
            -out ${tf_plan_file}'
        }
      }      
    }

    stage('Approval') {
      steps {
        script {
          def userInput = input(id: 'confirm', message: 'Apply Terraform?', parameters: [ [$class: 'BooleanParameterDefinition', defaultValue: false, description: 'Apply terraform', name: 'confirm'] ])
        }
      }
    }

    stage('TF Apply') {
      steps {
        dir(project_dir) {
          sh '${tf_command} apply --input=false ${tf_plan_file} -no-color'
        }
      }
    }
  } 
}